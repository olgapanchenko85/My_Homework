{
	"info": {
		"_postman_id": "0bf92cdb-443e-4cbd-922b-450eb51cdae2",
		"name": "Hw_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "02",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json\r",
							"let jsonData = pm.response.json();\r",
							"// Проверить, что name в ответе равно name s request(name вбить руками)\r",
							"pm.test(\"Check name\", function () {\r",
							"        pm.expect(jsonData.name).to.eql(\"Dima\");\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(\"30\");\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками)\r",
							"pm.test(\"Check salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(2000);\r",
							"});\r",
							"// Спарсить request\r",
							"let req_data = request.data;   \r",
							"// Проверить, что name в ответе равно name s request (name забрать из request)        \r",
							"pm.test(\"Check name\", function () {\r",
							"        pm.expect(jsonData.name).to.eql(req_data.name);\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"pm.test(\"Chek age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req_data.age);\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request)\r",
							"pm.test(\"Check salary\", function () {\r",
							"        pm.expect(jsonData.salary).to.eql(+req_data.salary);\r",
							"});\r",
							"// Вывести в консоль параметр family из response\r",
							"console.log(jsonData.family)\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check salary 1,5 year\", function () {\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req_data.salary*4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Dima",
							"type": "default"
						},
						{
							"key": "age",
							"value": "30",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "03",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json\r",
							"    let jsonData = pm.response.json();\r",
							"// Спарсить request\r",
							"let req_data = pm.request.url.query.toObject();\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_data.name);\r",
							"});\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(req_data.age);\r",
							"});\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Chack salary\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+req_data.salary);\r",
							"});\r",
							"// Вывести в консоль параметр family из response\r",
							"console.log(jsonData.family)\r",
							"// Проверить, что у параметра dog есть параметры name\r",
							"pm.test(\"Check Dog name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"// Проверить, что у параметра dog есть параметры age\r",
							"pm.test(\"Check Dog age\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"// Проверить, что параметр name имеет значение Luky\r",
							"pm.test(\"Check Dog name=Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.have.eql(\"Luky\");\r",
							"});\r",
							"// Проверить, что параметр age имеет значение 4\r",
							"pm.test(\"Check Dog age=4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.have.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Emma&age=44&salary=1000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Emma"
						},
						{
							"key": "age",
							"value": "44"
						},
						{
							"key": "salary",
							"value": "1000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "04",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Спарсить response body в json.\r",
							"    let jsonData = pm.response.json();\r",
							"// Спарсить request.\r",
							"let req_data = pm.request.url.query.toObject();\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request)\r",
							"pm.test(\"Check name\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(req_data.name);\r",
							"});\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check age\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+req_data.age);\r",
							"});\r",
							"// // Вывести в консоль параметр salary из request\r",
							"console.log(req_data.salary)\r",
							"// // Вывести в консоль параметр salary из response\r",
							"console.log(jsonData.salary)\r",
							"// Вывести в консоль 0-й элемент параметра salary из response\r",
							"console.log(jsonData.salary[0])\r",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response\r",
							"console.log(jsonData.salary[1])\r",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response\r",
							"console.log(jsonData.salary[2])\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request)\r",
							"pm.test(\"Check salary_0\", function () {\r",
							"        pm.expect(jsonData.salary[0]).to.eql(+req_data.salary);\r",
							"});\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)\r",
							"pm.test(\"Check salary_1\", function () {\r",
							"        pm.expect(+jsonData.salary[1]).to.eql(req_data.salary*2);\r",
							"});\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)\r",
							"pm.test(\"Check salary_2\", function () {\r",
							"        pm.expect(+jsonData.salary[2]).to.eql(req_data.salary*3);\r",
							"});\r",
							"// Создать в окружении переменную name\r",
							"pm.environment.set(\"name\", \"Inna\");\r",
							"// Создать в окружении переменную age\r",
							"pm.environment.set(\"age\", \"35\");\r",
							"// Создать в окружении переменную salary\r",
							"pm.environment.set(\"salary\", \"2000\");\r",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary\r",
							"let salary_length = jsonData.length;\r",
							"for (let i = 0; i < salary_length; i++)\r",
							"console.log(jsonData.salary[i])"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Ivan&age=38&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Ivan"
						},
						{
							"key": "age",
							"value": "38"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		}
	]
}